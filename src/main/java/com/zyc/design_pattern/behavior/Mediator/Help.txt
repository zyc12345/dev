1.调停者模式:为了解决对象之间复杂度调用，多个对象之间的复杂调用对于之后的维护很不利。

2.将多个对象的复杂调用封装起来，由调停者类与各个对象交互，对象和对象之间没有交互，将调停者中心化，起到对象之间的松耦合，将多对多变成了多对一。

3.抽象调停者类，具体调停者类，抽象同事类，具体同事类，当同事类发生操作的时候要通知调停者类，然后调停者将这个改变导致的其他类的改变进行操作。

4.过度集中化，如果对象之间交互特别多，特别复杂，那会使调停者变得十分复杂，难以维护。
